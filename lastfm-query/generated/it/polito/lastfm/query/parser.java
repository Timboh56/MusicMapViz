
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Dec 06 03:03:48 EST 2012
//----------------------------------------------------

package it.polito.lastfm.query;

import java_cup.runtime.*;
import java.io.*;
import java.util.Map;
import java.util.HashMap;
import java.util.List;
import java.util.LinkedList;
import java.util.Collection;
import net.roarsoftware.lastfm.Artist;
import net.roarsoftware.lastfm.Album;
import net.roarsoftware.lastfm.Event;
import net.roarsoftware.lastfm.Track;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Dec 06 03:03:48 EST 2012
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\160\000\002\002\004\000\002\043\003\000\002\043" +
    "\003\000\002\002\003\000\002\003\004\000\002\003\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\004\000\002\046\004" +
    "\000\002\042\004\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\006\007\000\002" +
    "\006\006\000\002\010\007\000\002\010\006\000\002\011" +
    "\007\000\002\011\006\000\002\007\007\000\002\007\006" +
    "\000\002\012\007\000\002\012\006\000\002\044\003\000" +
    "\002\020\005\000\002\020\005\000\002\020\003\000\002" +
    "\020\003\000\002\034\002\000\002\034\004\000\002\022" +
    "\002\000\002\022\004\000\002\031\002\000\002\031\004" +
    "\000\002\037\002\000\002\037\004\000\002\040\005\000" +
    "\002\040\005\000\002\040\005\000\002\040\003\000\002" +
    "\041\005\000\002\041\005\000\002\041\005\000\002\041" +
    "\005\000\002\041\005\000\002\041\005\000\002\041\005" +
    "\000\002\041\005\000\002\032\005\000\002\032\005\000" +
    "\002\032\005\000\002\032\003\000\002\033\005\000\002" +
    "\033\005\000\002\033\005\000\002\033\005\000\002\033" +
    "\005\000\002\033\005\000\002\035\005\000\002\035\005" +
    "\000\002\035\005\000\002\035\003\000\002\023\005\000" +
    "\002\023\005\000\002\023\005\000\002\023\003\000\002" +
    "\026\002\000\002\026\004\000\002\027\005\000\002\027" +
    "\005\000\002\027\005\000\002\027\003\000\002\036\005" +
    "\000\002\036\005\000\002\036\005\000\002\036\005\000" +
    "\002\024\005\000\002\024\005\000\002\030\005\000\002" +
    "\030\005\000\002\030\005\000\002\030\005\000\002\021" +
    "\002\000\002\021\004\000\002\021\004\000\002\021\004" +
    "\000\002\013\003\000\002\013\004\000\002\014\007\000" +
    "\002\014\007\000\002\045\002\000\002\045\003\000\002" +
    "\015\003\000\002\015\005\000\002\017\005\000\002\017" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\025\010\000\002\025\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\324\000\032\003\026\004\014\010\011\011\033\012" +
    "\007\014\006\015\017\016\020\022\024\036\035\041\023" +
    "\042\013\001\002\000\004\002\326\001\002\000\034\002" +
    "\ufff6\003\ufff6\004\ufff6\010\ufff6\011\ufff6\012\ufff6\014\ufff6" +
    "\015\ufff6\016\ufff6\022\ufff6\036\ufff6\041\ufff6\042\ufff6\001" +
    "\002\000\010\003\272\004\072\005\073\001\002\000\010" +
    "\003\245\004\072\005\073\001\002\000\034\002\ufff1\003" +
    "\ufff1\004\ufff1\010\ufff1\011\ufff1\012\ufff1\014\ufff1\015\ufff1" +
    "\016\ufff1\022\ufff1\036\ufff1\041\ufff1\042\ufff1\001\002\000" +
    "\010\003\213\004\072\005\073\001\002\000\034\002\ufffc" +
    "\003\ufffc\004\ufffc\010\ufffc\011\ufffc\012\ufffc\014\ufffc\015" +
    "\ufffc\016\ufffc\022\ufffc\036\ufffc\041\ufffc\042\ufffc\001\002" +
    "\000\006\036\035\041\023\001\002\000\010\036\035\037" +
    "\177\041\023\001\002\000\034\002\ufffb\003\ufffb\004\ufffb" +
    "\010\ufffb\011\ufffb\012\ufffb\014\ufffb\015\ufffb\016\ufffb\022" +
    "\ufffb\036\ufffb\041\ufffb\042\ufffb\001\002\000\034\002\ufff7" +
    "\003\ufff7\004\ufff7\010\ufff7\011\ufff7\012\ufff7\014\ufff7\015" +
    "\ufff7\016\ufff7\022\ufff7\036\ufff7\041\ufff7\042\ufff7\001\002" +
    "\000\010\003\136\004\072\005\073\001\002\000\010\003" +
    "\074\004\072\005\073\001\002\000\034\002\ufff9\003\ufff9" +
    "\004\ufff9\010\ufff9\011\ufff9\012\ufff9\014\ufff9\015\ufff9\016" +
    "\ufff9\022\ufff9\036\ufff9\041\ufff9\042\ufff9\001\002\000\034" +
    "\002\ufff3\003\ufff3\004\ufff3\010\ufff3\011\ufff3\012\ufff3\014" +
    "\ufff3\015\ufff3\016\ufff3\022\ufff3\036\ufff3\041\ufff3\042\ufff3" +
    "\001\002\000\034\002\000\003\000\004\000\010\000\011" +
    "\000\012\000\014\000\015\000\016\000\022\000\036\000" +
    "\041\000\042\000\001\002\000\006\003\050\031\051\001" +
    "\002\000\034\002\ufffa\003\ufffa\004\ufffa\010\ufffa\011\ufffa" +
    "\012\ufffa\014\ufffa\015\ufffa\016\ufffa\022\ufffa\036\ufffa\041" +
    "\ufffa\042\ufffa\001\002\000\006\036\035\041\023\001\002" +
    "\000\034\002\ufff4\003\ufff4\004\ufff4\010\ufff4\011\ufff4\012" +
    "\ufff4\014\ufff4\015\ufff4\016\ufff4\022\ufff4\036\ufff4\041\ufff4" +
    "\042\ufff4\001\002\000\034\002\ufff8\003\ufff8\004\ufff8\010" +
    "\ufff8\011\ufff8\012\ufff8\014\ufff8\015\ufff8\016\ufff8\022\ufff8" +
    "\036\ufff8\041\ufff8\042\ufff8\001\002\000\034\002\ufff5\003" +
    "\ufff5\004\ufff5\010\ufff5\011\ufff5\012\ufff5\014\ufff5\015\ufff5" +
    "\016\ufff5\022\ufff5\036\ufff5\041\ufff5\042\ufff5\001\002\000" +
    "\034\002\ufffe\003\026\004\014\010\011\011\033\012\007" +
    "\014\006\015\017\016\020\022\024\036\035\041\023\042" +
    "\013\001\002\000\012\003\040\004\036\005\037\013\041" +
    "\001\002\000\034\002\ufff2\003\ufff2\004\ufff2\010\ufff2\011" +
    "\ufff2\012\ufff2\014\ufff2\015\ufff2\016\ufff2\022\ufff2\036\ufff2" +
    "\041\ufff2\042\ufff2\001\002\000\034\002\uffff\003\uffff\004" +
    "\uffff\010\uffff\011\uffff\012\uffff\014\uffff\015\uffff\016\uffff" +
    "\022\uffff\036\uffff\041\uffff\042\uffff\001\002\000\006\036" +
    "\035\041\023\001\002\000\006\036\035\041\023\001\002" +
    "\000\006\036\035\041\023\001\002\000\006\036\035\041" +
    "\023\001\002\000\034\002\uffec\003\uffec\004\uffec\010\uffec" +
    "\011\uffec\012\uffec\014\uffec\015\uffec\016\uffec\022\uffec\036" +
    "\uffec\041\uffec\042\uffec\001\002\000\034\002\uffea\003\uffea" +
    "\004\uffea\010\uffea\011\uffea\012\uffea\014\uffea\015\uffea\016" +
    "\uffea\022\uffea\036\uffea\041\uffea\042\uffea\001\002\000\034" +
    "\002\uffed\003\uffed\004\uffed\010\uffed\011\uffed\012\uffed\014" +
    "\uffed\015\uffed\016\uffed\022\uffed\036\uffed\041\uffed\042\uffed" +
    "\001\002\000\034\002\uffeb\003\uffeb\004\uffeb\010\uffeb\011" +
    "\uffeb\012\uffeb\014\uffeb\015\uffeb\016\uffeb\022\uffeb\036\uffeb" +
    "\041\uffeb\042\uffeb\001\002\000\034\002\ufffd\003\ufffd\004" +
    "\ufffd\010\ufffd\011\ufffd\012\ufffd\014\ufffd\015\ufffd\016\ufffd" +
    "\022\ufffd\036\ufffd\041\ufffd\042\ufffd\001\002\000\034\002" +
    "\ufff0\003\ufff0\004\ufff0\010\ufff0\011\ufff0\012\ufff0\014\ufff0" +
    "\015\ufff0\016\ufff0\022\ufff0\036\ufff0\041\ufff0\042\ufff0\001" +
    "\002\000\010\023\064\036\uff9c\041\uff9c\001\002\000\012" +
    "\004\052\005\053\006\060\040\057\001\002\000\014\007" +
    "\uff94\023\uff94\032\uff94\036\uff94\041\uff94\001\002\000\014" +
    "\007\uff95\023\uff95\032\uff95\036\uff95\041\uff95\001\002\000" +
    "\006\007\062\032\063\001\002\000\006\007\uff97\032\uff97" +
    "\001\002\000\014\007\uff96\023\uff96\032\uff96\036\uff96\041" +
    "\uff96\001\002\000\004\006\061\001\002\000\022\007\uffa0" +
    "\017\uffa0\020\uffa0\023\uffa0\032\uffa0\034\uffa0\036\uffa0\041" +
    "\uffa0\001\002\000\022\007\uff9f\017\uff9f\020\uff9f\023\uff9f" +
    "\032\uff9f\034\uff9f\036\uff9f\041\uff9f\001\002\000\012\004" +
    "\052\005\053\006\060\040\057\001\002\000\010\023\064" +
    "\036\uff9c\041\uff9c\001\002\000\006\036\uff9b\041\uff9b\001" +
    "\002\000\006\036\035\041\023\001\002\000\034\002\uff93" +
    "\003\uff93\004\uff93\010\uff93\011\uff93\012\uff93\014\uff93\015" +
    "\uff93\016\uff93\022\uff93\036\uff93\041\uff93\042\uff93\001\002" +
    "\000\006\007\uff98\032\uff98\001\002\000\006\036\035\041" +
    "\023\001\002\000\034\002\uff92\003\uff92\004\uff92\010\uff92" +
    "\011\uff92\012\uff92\014\uff92\015\uff92\016\uff92\022\uff92\036" +
    "\uff92\041\uff92\042\uff92\001\002\000\014\007\uffdb\033\uffdb" +
    "\034\uffdb\036\uffdb\041\uffdb\001\002\000\014\007\uffdc\033" +
    "\uffdc\034\uffdc\036\uffdc\041\uffdc\001\002\000\010\034\126" +
    "\036\uffa4\041\uffa4\001\002\000\012\033\103\034\uffda\036" +
    "\uffda\041\uffda\001\002\000\014\007\077\033\uffdf\034\uffdf" +
    "\036\uffdf\041\uffdf\001\002\000\006\004\100\005\101\001" +
    "\002\000\014\007\uffdd\033\uffdd\034\uffdd\036\uffdd\041\uffdd" +
    "\001\002\000\014\007\uffde\033\uffde\034\uffde\036\uffde\041" +
    "\uffde\001\002\000\010\034\126\036\uffa4\041\uffa4\001\002" +
    "\000\010\021\106\027\107\031\110\001\002\000\016\017" +
    "\uffb9\020\uffb9\032\uffb9\034\uffb9\036\uffb9\041\uffb9\001\002" +
    "\000\014\017\114\020\112\034\uffd9\036\uffd9\041\uffd9\001" +
    "\002\000\004\035\122\001\002\000\004\035\117\001\002" +
    "\000\010\021\106\027\107\031\110\001\002\000\010\017" +
    "\114\020\112\032\113\001\002\000\010\021\106\027\107" +
    "\031\110\001\002\000\016\017\uffbc\020\uffbc\032\uffbc\034" +
    "\uffbc\036\uffbc\041\uffbc\001\002\000\010\021\106\027\107" +
    "\031\110\001\002\000\016\017\uffba\020\112\032\uffba\034" +
    "\uffba\036\uffba\041\uffba\001\002\000\016\017\uffbb\020\uffbb" +
    "\032\uffbb\034\uffbb\036\uffbb\041\uffbb\001\002\000\006\004" +
    "\120\005\121\001\002\000\016\017\uffab\020\uffab\032\uffab" +
    "\034\uffab\036\uffab\041\uffab\001\002\000\016\017\uffac\020" +
    "\uffac\032\uffac\034\uffac\036\uffac\041\uffac\001\002\000\010" +
    "\004\123\006\060\040\057\001\002\000\016\017\uffad\020" +
    "\uffad\032\uffad\034\uffad\036\uffad\041\uffad\001\002\000\016" +
    "\017\uffae\020\uffae\032\uffae\034\uffae\036\uffae\041\uffae\001" +
    "\002\000\006\036\035\041\023\001\002\000\010\004\127" +
    "\005\130\013\131\001\002\000\006\036\uffa2\041\uffa2\001" +
    "\002\000\006\036\uffa3\041\uffa3\001\002\000\006\036\uffa1" +
    "\041\uffa1\001\002\000\034\002\uffe1\003\uffe1\004\uffe1\010" +
    "\uffe1\011\uffe1\012\uffe1\014\uffe1\015\uffe1\016\uffe1\022\uffe1" +
    "\036\uffe1\041\uffe1\042\uffe1\001\002\000\006\036\035\041" +
    "\023\001\002\000\034\002\uffe0\003\uffe0\004\uffe0\010\uffe0" +
    "\011\uffe0\012\uffe0\014\uffe0\015\uffe0\016\uffe0\022\uffe0\036" +
    "\uffe0\041\uffe0\042\uffe0\001\002\000\012\033\141\034\uffd4" +
    "\036\uffd4\041\uffd4\001\002\000\010\034\126\036\uffa4\041" +
    "\uffa4\001\002\000\006\036\035\041\023\001\002\000\034" +
    "\002\uffe4\003\uffe4\004\uffe4\010\uffe4\011\uffe4\012\uffe4\014" +
    "\uffe4\015\uffe4\016\uffe4\022\uffe4\036\uffe4\041\uffe4\042\uffe4" +
    "\001\002\000\014\025\145\026\146\027\151\030\153\031" +
    "\152\001\002\000\010\034\126\036\uffa4\041\uffa4\001\002" +
    "\000\006\036\035\041\023\001\002\000\034\002\uffe5\003" +
    "\uffe5\004\uffe5\010\uffe5\011\uffe5\012\uffe5\014\uffe5\015\uffe5" +
    "\016\uffe5\022\uffe5\036\uffe5\041\uffe5\042\uffe5\001\002\000" +
    "\004\035\173\001\002\000\004\035\170\001\002\000\016" +
    "\017\uffcf\020\uffcf\032\uffcf\034\uffcf\036\uffcf\041\uffcf\001" +
    "\002\000\014\017\162\020\160\034\uffd3\036\uffd3\041\uffd3" +
    "\001\002\000\004\035\165\001\002\000\014\025\145\026" +
    "\146\027\151\030\153\031\152\001\002\000\004\035\154" +
    "\001\002\000\006\004\155\005\156\001\002\000\016\017" +
    "\uffc9\020\uffc9\032\uffc9\034\uffc9\036\uffc9\041\uffc9\001\002" +
    "\000\016\017\uffca\020\uffca\032\uffca\034\uffca\036\uffca\041" +
    "\uffca\001\002\000\010\017\162\020\160\032\161\001\002" +
    "\000\014\025\145\026\146\027\151\030\153\031\152\001" +
    "\002\000\016\017\uffd2\020\uffd2\032\uffd2\034\uffd2\036\uffd2" +
    "\041\uffd2\001\002\000\014\025\145\026\146\027\151\030" +
    "\153\031\152\001\002\000\016\017\uffd0\020\160\032\uffd0" +
    "\034\uffd0\036\uffd0\041\uffd0\001\002\000\016\017\uffd1\020" +
    "\uffd1\032\uffd1\034\uffd1\036\uffd1\041\uffd1\001\002\000\006" +
    "\004\166\005\167\001\002\000\016\017\uffc7\020\uffc7\032" +
    "\uffc7\034\uffc7\036\uffc7\041\uffc7\001\002\000\016\017\uffc8" +
    "\020\uffc8\032\uffc8\034\uffc8\036\uffc8\041\uffc8\001\002\000" +
    "\010\004\171\006\060\040\057\001\002\000\016\017\uffcb" +
    "\020\uffcb\032\uffcb\034\uffcb\036\uffcb\041\uffcb\001\002\000" +
    "\016\017\uffcc\020\uffcc\032\uffcc\034\uffcc\036\uffcc\041\uffcc" +
    "\001\002\000\006\004\174\005\175\001\002\000\016\017" +
    "\uffcd\020\uffcd\032\uffcd\034\uffcd\036\uffcd\041\uffcd\001\002" +
    "\000\016\017\uffce\020\uffce\032\uffce\034\uffce\036\uffce\041" +
    "\uffce\001\002\000\034\002\uffee\003\uffee\004\uffee\010\uffee" +
    "\011\uffee\012\uffee\014\uffee\015\uffee\016\uffee\022\uffee\036" +
    "\uffee\041\uffee\042\uffee\001\002\000\016\003\202\004\052" +
    "\005\053\006\060\031\203\040\057\001\002\000\010\023" +
    "\064\036\uff9c\041\uff9c\001\002\000\010\023\uff9a\036\uff9a" +
    "\041\uff9a\001\002\000\010\023\064\036\uff9c\041\uff9c\001" +
    "\002\000\012\004\052\005\053\006\060\040\057\001\002" +
    "\000\006\007\062\032\205\001\002\000\010\023\uff99\036" +
    "\uff99\041\uff99\001\002\000\006\036\035\041\023\001\002" +
    "\000\034\002\uff9d\003\uff9d\004\uff9d\010\uff9d\011\uff9d\012" +
    "\uff9d\014\uff9d\015\uff9d\016\uff9d\022\uff9d\036\uff9d\041\uff9d" +
    "\042\uff9d\001\002\000\006\036\035\041\023\001\002\000" +
    "\034\002\uff9e\003\uff9e\004\uff9e\010\uff9e\011\uff9e\012\uff9e" +
    "\014\uff9e\015\uff9e\016\uff9e\022\uff9e\036\uff9e\041\uff9e\042" +
    "\uff9e\001\002\000\034\002\uffef\003\uffef\004\uffef\010\uffef" +
    "\011\uffef\012\uffef\014\uffef\015\uffef\016\uffef\022\uffef\036" +
    "\uffef\041\uffef\042\uffef\001\002\000\010\034\126\036\uffa4" +
    "\041\uffa4\001\002\000\012\033\215\034\uffb4\036\uffb4\041" +
    "\uffb4\001\002\000\010\021\224\024\221\031\225\001\002" +
    "\000\010\034\126\036\uffa4\041\uffa4\001\002\000\006\036" +
    "\035\041\023\001\002\000\034\002\uffe9\003\uffe9\004\uffe9" +
    "\010\uffe9\011\uffe9\012\uffe9\014\uffe9\015\uffe9\016\uffe9\022" +
    "\uffe9\036\uffe9\041\uffe9\042\uffe9\001\002\000\004\035\237" +
    "\001\002\000\014\017\231\020\227\034\uffb3\036\uffb3\041" +
    "\uffb3\001\002\000\016\017\uffaf\020\uffaf\032\uffaf\034\uffaf" +
    "\036\uffaf\041\uffaf\001\002\000\004\035\234\001\002\000" +
    "\010\021\224\024\221\031\225\001\002\000\010\017\231" +
    "\020\227\032\230\001\002\000\010\021\224\024\221\031" +
    "\225\001\002\000\016\017\uffb2\020\uffb2\032\uffb2\034\uffb2" +
    "\036\uffb2\041\uffb2\001\002\000\010\021\224\024\221\031" +
    "\225\001\002\000\016\017\uffb0\020\227\032\uffb0\034\uffb0" +
    "\036\uffb0\041\uffb0\001\002\000\016\017\uffb1\020\uffb1\032" +
    "\uffb1\034\uffb1\036\uffb1\041\uffb1\001\002\000\010\004\235" +
    "\006\060\040\057\001\002\000\016\017\uffa5\020\uffa5\032" +
    "\uffa5\034\uffa5\036\uffa5\041\uffa5\001\002\000\016\017\uffa6" +
    "\020\uffa6\032\uffa6\034\uffa6\036\uffa6\041\uffa6\001\002\000" +
    "\010\004\240\006\060\040\057\001\002\000\016\017\uffa7" +
    "\020\uffa7\032\uffa7\034\uffa7\036\uffa7\041\uffa7\001\002\000" +
    "\016\017\uffa8\020\uffa8\032\uffa8\034\uffa8\036\uffa8\041\uffa8" +
    "\001\002\000\006\036\035\041\023\001\002\000\034\002" +
    "\uffe8\003\uffe8\004\uffe8\010\uffe8\011\uffe8\012\uffe8\014\uffe8" +
    "\015\uffe8\016\uffe8\022\uffe8\036\uffe8\041\uffe8\042\uffe8\001" +
    "\002\000\012\033\251\034\uffd8\036\uffd8\041\uffd8\001\002" +
    "\000\010\034\126\036\uffa4\041\uffa4\001\002\000\006\036" +
    "\035\041\023\001\002\000\034\002\uffe2\003\uffe2\004\uffe2" +
    "\010\uffe2\011\uffe2\012\uffe2\014\uffe2\015\uffe2\016\uffe2\022" +
    "\uffe2\036\uffe2\041\uffe2\042\uffe2\001\002\000\010\034\126" +
    "\036\uffa4\041\uffa4\001\002\000\006\021\254\031\255\001" +
    "\002\000\016\017\uffb5\020\uffb5\032\uffb5\034\uffb5\036\uffb5" +
    "\041\uffb5\001\002\000\014\017\261\020\257\034\uffd7\036" +
    "\uffd7\041\uffd7\001\002\000\004\035\264\001\002\000\006" +
    "\021\254\031\255\001\002\000\010\017\261\020\257\032" +
    "\260\001\002\000\006\021\254\031\255\001\002\000\016" +
    "\017\uffb8\020\uffb8\032\uffb8\034\uffb8\036\uffb8\041\uffb8\001" +
    "\002\000\006\021\254\031\255\001\002\000\016\017\uffb6" +
    "\020\257\032\uffb6\034\uffb6\036\uffb6\041\uffb6\001\002\000" +
    "\016\017\uffb7\020\uffb7\032\uffb7\034\uffb7\036\uffb7\041\uffb7" +
    "\001\002\000\010\004\265\006\060\040\057\001\002\000" +
    "\016\017\uffa9\020\uffa9\032\uffa9\034\uffa9\036\uffa9\041\uffa9" +
    "\001\002\000\016\017\uffaa\020\uffaa\032\uffaa\034\uffaa\036" +
    "\uffaa\041\uffaa\001\002\000\006\036\035\041\023\001\002" +
    "\000\034\002\uffe3\003\uffe3\004\uffe3\010\uffe3\011\uffe3\012" +
    "\uffe3\014\uffe3\015\uffe3\016\uffe3\022\uffe3\036\uffe3\041\uffe3" +
    "\042\uffe3\001\002\000\012\033\275\034\uffd6\036\uffd6\041" +
    "\uffd6\001\002\000\010\034\126\036\uffa4\041\uffa4\001\002" +
    "\000\006\036\035\041\023\001\002\000\034\002\uffe6\003" +
    "\uffe6\004\uffe6\010\uffe6\011\uffe6\012\uffe6\014\uffe6\015\uffe6" +
    "\016\uffe6\022\uffe6\036\uffe6\041\uffe6\042\uffe6\001\002\000" +
    "\012\025\301\026\302\030\305\031\304\001\002\000\010" +
    "\034\126\036\uffa4\041\uffa4\001\002\000\006\036\035\041" +
    "\023\001\002\000\034\002\uffe7\003\uffe7\004\uffe7\010\uffe7" +
    "\011\uffe7\012\uffe7\014\uffe7\015\uffe7\016\uffe7\022\uffe7\036" +
    "\uffe7\041\uffe7\042\uffe7\001\002\000\004\035\323\001\002" +
    "\000\004\035\320\001\002\000\016\017\uffc3\020\uffc3\032" +
    "\uffc3\034\uffc3\036\uffc3\041\uffc3\001\002\000\012\025\301" +
    "\026\302\030\305\031\304\001\002\000\004\035\313\001" +
    "\002\000\014\017\310\020\307\034\uffd5\036\uffd5\041\uffd5" +
    "\001\002\000\012\025\301\026\302\030\305\031\304\001" +
    "\002\000\012\025\301\026\302\030\305\031\304\001\002" +
    "\000\016\017\uffc4\020\307\032\uffc4\034\uffc4\036\uffc4\041" +
    "\uffc4\001\002\000\016\017\uffc5\020\uffc5\032\uffc5\034\uffc5" +
    "\036\uffc5\041\uffc5\001\002\000\006\004\314\005\315\001" +
    "\002\000\016\017\uffbd\020\uffbd\032\uffbd\034\uffbd\036\uffbd" +
    "\041\uffbd\001\002\000\016\017\uffbe\020\uffbe\032\uffbe\034" +
    "\uffbe\036\uffbe\041\uffbe\001\002\000\010\017\310\020\307" +
    "\032\317\001\002\000\016\017\uffc6\020\uffc6\032\uffc6\034" +
    "\uffc6\036\uffc6\041\uffc6\001\002\000\010\004\321\006\060" +
    "\040\057\001\002\000\016\017\uffbf\020\uffbf\032\uffbf\034" +
    "\uffbf\036\uffbf\041\uffbf\001\002\000\016\017\uffc0\020\uffc0" +
    "\032\uffc0\034\uffc0\036\uffc0\041\uffc0\001\002\000\006\004" +
    "\324\005\325\001\002\000\016\017\uffc1\020\uffc1\032\uffc1" +
    "\034\uffc1\036\uffc1\041\uffc1\001\002\000\016\017\uffc2\020" +
    "\uffc2\032\uffc2\034\uffc2\036\uffc2\041\uffc2\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\324\000\036\002\003\003\031\004\011\005\014\006" +
    "\027\007\015\010\004\011\030\012\026\014\024\025\020" +
    "\042\021\043\007\046\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\020\075\044\270\001\001\000\006" +
    "\020\075\044\243\001\001\000\002\001\001\000\006\020" +
    "\075\044\213\001\001\000\002\001\001\000\004\043\211" +
    "\001\001\000\004\043\175\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\020\075\044\134\001\001\000\006" +
    "\020\075\044\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\043\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\004\045\005\014\006\027" +
    "\007\015\010\004\011\030\012\026\014\024\025\020\042" +
    "\021\043\007\046\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\043\044\001\001\000" +
    "\004\043\043\001\001\000\004\043\042\001\001\000\004" +
    "\043\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\045\067\001\001\000\010\013\055\016" +
    "\054\017\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\013\055\016\066\001\001\000\004\045\064\001\001\000" +
    "\002\001\001\000\004\043\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\043\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\132" +
    "\001\001\000\004\034\101\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\124\001\001\000\006\035\104\036\103\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\035\110\036\103\001\001\000\002\001" +
    "\001\000\006\035\115\036\103\001\001\000\002\001\001" +
    "\000\006\035\114\036\103\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\123\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\043\131\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\043\133\001\001\000\002\001\001" +
    "\000\004\037\141\001\001\000\004\021\136\001\001\000" +
    "\004\043\137\001\001\000\002\001\001\000\006\040\147" +
    "\041\146\001\001\000\004\021\142\001\001\000\004\043" +
    "\143\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\040\156\041\146\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\040\163\041\146\001\001\000\002" +
    "\001\001\000\006\040\162\041\146\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\171\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\013\055\015" +
    "\177\016\200\001\001\000\004\045\207\001\001\000\002" +
    "\001\001\000\004\045\205\001\001\000\010\013\055\016" +
    "\054\017\203\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\043\206\001\001\000\002\001\001\000\004\043" +
    "\210\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\241\001\001\000\004\026\215\001\001\000\006\027" +
    "\221\030\222\001\001\000\004\021\216\001\001\000\004" +
    "\043\217\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\027\225\030\222\001\001\000\002\001\001\000\006\027" +
    "\232\030\222\001\001\000\002\001\001\000\006\027\231" +
    "\030\222\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\235\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\240\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\043\242\001\001\000\002\001\001\000\004" +
    "\022\247\001\001\000\004\021\245\001\001\000\004\043" +
    "\246\001\001\000\002\001\001\000\004\021\266\001\001" +
    "\000\006\023\252\024\251\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\023\255\024\251" +
    "\001\001\000\002\001\001\000\006\023\262\024\251\001" +
    "\001\000\002\001\001\000\006\023\261\024\251\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\265\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\043\267" +
    "\001\001\000\002\001\001\000\004\031\275\001\001\000" +
    "\004\021\272\001\001\000\004\043\273\001\001\000\002" +
    "\001\001\000\006\032\305\033\302\001\001\000\004\021" +
    "\276\001\001\000\004\043\277\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\032\315\033\302\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\032\311\033\302\001\001\000\006\032" +
    "\310\033\302\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\321\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public SymbolTable symbols = SymbolTable.getInstance();
	public OutputManager outputMan = new OutputManager();
	public QueryEngine query = new QueryEngine();


	public void reportError(String message, Object o){
		System.err.println(message);
	}
	
	public void reportError(String message){
		System.err.println(message);
	}

	public void reportWarning(String message){
		System.err.println(message);
	}
	
	public void syntax_error(Symbol actual) {
      StringBuffer m = new StringBuffer("Syntax error ");

      if (cur_token.left != -1) {                
        m.append(" at " + (actual.left+1));   
	  m.append("/" + (actual.right+1));
      }
      System.err.println(m);
    } 

	

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // add ::= ADD error semicolon nl 
            {
              Object RESULT =null;
		int add_symleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int add_symright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object add_sym = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int suppressleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int suppressright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object suppress = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.reportError("Error while appending to list"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("add",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // add ::= ADD LBR assigned_list RBR semicolon nl 
            {
              Object RESULT =null;
		int add_symleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int add_symright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object add_sym = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int assignedleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int assignedright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object assigned = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int suppressleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int suppressright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object suppress = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		try {
				parser.symbols.add2List(add_sym, assigned, (Boolean)suppress);
			} catch (SymbolTableException e ){
				parser.reportError(e.getMessage());
			}
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("add",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // assigned ::= ID 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = val; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assigned",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // assigned ::= STRING 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = val; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assigned",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // assigned ::= integer 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = val; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assigned",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // assigned_list ::= assigned 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
		List tempList = new LinkedList();
		tempList.add(val);
		RESULT = tempList; 
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assigned_list",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // assigned_list ::= assigned_list CM assigned 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
		List temp = new LinkedList();
		for (Object o : (List)list)
			temp.add(o);
		temp.add(val);
		RESULT = temp;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assigned_list",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // assigned_type ::= LBR assigned_list RBR 
            {
              Object RESULT =null;
		int assignlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int assignlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object assignlist = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = assignlist; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assigned_type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // assigned_type ::= assigned 
            {
              Object RESULT =null;
		int assignleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int assignright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object assign = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = assign; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assigned_type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // semicolon ::= SMCL 
            {
              Object RESULT =null;
		 RESULT = new Boolean(true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // semicolon ::= 
            {
              Object RESULT =null;
		 RESULT = new Boolean(false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("semicolon",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // assignment ::= ID ASSIGN error semicolon nl 
            {
              Object RESULT =null;
		int idnameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idnameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object idname = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int suppressleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int suppressright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object suppress = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.reportError("Error in assignment"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // assignment ::= ID ASSIGN assigned_type semicolon nl 
            {
              Object RESULT =null;
		int idnameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idnameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object idname = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int suppressleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int suppressright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object suppress = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
		try { 
			parser.symbols.setNewSymbol(idname, value, (Boolean)suppress);
		} catch (SymbolTableException e ){
			parser.reportError(e.getMessage());
		}
			
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // integer ::= MINUS INT 
            {
              Object RESULT =null;
		int minusvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int minusvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object minusval = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Integer(- 1 * ((Integer)minusval).intValue()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("integer",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // integer ::= INT 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = val; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("integer",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // output_type ::= REDIR STDOUT 
            {
              Object RESULT =null;
		 RESULT = new String(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("output_type",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // output_type ::= REDIR ID 
            {
              Object RESULT =null;
		int idnameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idnameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object idname = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
		try {
			RESULT = parser.symbols.getFilename((String)idname); 
		}catch (Exception e){
			parser.reportError(e.getMessage());
			parser.reportWarning("Warning: bad output type; using default output");
		}		
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("output_type",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // output_type ::= REDIR STRING 
            {
              Object RESULT =null;
		int filenameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int filenameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object filename = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
		RESULT = (String)filename.toString();		
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("output_type",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // output_type ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("output_type",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // info_c ::= PLAYCOUNT RELOP ID 
            {
              Object RESULT =null;
		int relleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int relright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object rel = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object idval = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			
		try{
			RESULT = (Collection<Artist>)parser.query.infoByPlaycount((String)rel, (String)idval);
		} catch(Exception e){
	 		parser.reportError(e.getMessage());
	 	}
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("info_c",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // info_c ::= PLAYCOUNT RELOP integer 
            {
              Object RESULT =null;
		int relleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int relright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object rel = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int intvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int intvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object intval = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			
		RESULT = (Collection<Artist>)parser.query.infoByPlaycount((String)rel, (Integer)intval);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("info_c",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // info_c ::= LISTENERS RELOP ID 
            {
              Object RESULT =null;
		int relleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int relright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object rel = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object idval = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			
		try {
	 		RESULT = (Collection<Artist>)parser.query.infoByListeners((String)rel, (String)idval);
	 	} catch(Exception e){
	 		parser.reportError(e.getMessage());
	 	}
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("info_c",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // info_c ::= LISTENERS RELOP integer 
            {
              Object RESULT =null;
		int relleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int relright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object rel = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int intvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int intvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object intval = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			
		RESULT = (Collection<Artist>)parser.query.infoByListeners((String)rel, (Integer)intval); 
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("info_c",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // album_c ::= PLAYCOUNT RELOP ID 
            {
              Object RESULT =null;
		int relleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int relright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object rel = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object idval = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			
		try {	
	 		RESULT = (HashMap<String, Collection<Album>>)parser.query.albumsByPlaycount((String)rel, (String)idval);
	 	} catch(Exception e){
	 		parser.reportError(e.getMessage());
	 	}
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("album_c",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // album_c ::= PLAYCOUNT RELOP integer 
            {
              Object RESULT =null;
		int relleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int relright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object rel = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int intvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int intvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object intval = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = (HashMap<String, Collection<Album>>)parser.query.albumsByPlaycount((String)rel, (Integer)intval);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("album_c",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // toptracks_c ::= ARTIST RELOP ID 
            {
              Object RESULT =null;
		int relleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int relright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object rel = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object idval = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			
		try { 
	 		RESULT = (HashMap<String, Collection<Track>>)parser.query.topTracksByArtist((String)rel, (Object)idval);
	 	} catch(Exception e){
	 		parser.reportError(e.getMessage());
	 	}
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("toptracks_c",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // toptracks_c ::= ARTIST RELOP STRING 
            {
              Object RESULT =null;
		int relleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int relright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object rel = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int strvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object strval = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		try {	
	 		RESULT = (HashMap<String, Collection<Track>>)parser.query.topTracksByArtist((String)rel, (String)strval);
	 	} catch(Exception e){ 
	 		parser.reportError(e.getMessage());
	 	}
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("toptracks_c",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // toptracks_c ::= PLAYCOUNT RELOP ID 
            {
              Object RESULT =null;
		int relleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int relright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object rel = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object idval = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			
		try {
	 		RESULT = (HashMap<String, Collection<Track>>)parser.query.topTracksByPlaycount((String)rel, (String)idval);
	 	} catch(Exception e){ 
	 		parser.reportError(e.getMessage());
	 	}
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("toptracks_c",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // toptracks_c ::= PLAYCOUNT RELOP integer 
            {
              Object RESULT =null;
		int relleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int relright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object rel = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int intvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int intvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object intval = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = (HashMap<String, Collection<Track>>)parser.query.topTracksByPlaycount((String)rel, (Integer)intval);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("toptracks_c",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // info_conditions ::= info_c 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (Collection<Artist>)c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("info_conditions",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // info_conditions ::= info_conditions OR info_conditions 
            {
              Object RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.query.infoOR((Collection<Artist>)c1, (Collection<Artist>)c2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("info_conditions",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // info_conditions ::= info_conditions AND info_conditions 
            {
              Object RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.query.infoAND((Collection<Artist>)c1, (Collection<Artist>)c2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("info_conditions",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // info_conditions ::= LBR info_conditions RBR 
            {
              Object RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object bc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = (Collection<Artist>)bc; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("info_conditions",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // if_info_conditions ::= WHERE info_conditions 
            {
              Object RESULT =null;
		int resleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int resright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object res = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (Collection<Artist>)res; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_info_conditions",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // if_info_conditions ::= 
            {
              Object RESULT =null;
		 RESULT = (Collection<Artist>)parser.query.simpleInfoQuery(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_info_conditions",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // album_conditions ::= album_c 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (HashMap<String, Collection<Album>>)c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("album_conditions",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // album_conditions ::= album_conditions OR album_conditions 
            {
              Object RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.query.albumOR((HashMap<String, Collection<Album>>)c1, (HashMap<String, Collection<Album>>)c2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("album_conditions",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // album_conditions ::= album_conditions AND album_conditions 
            {
              Object RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.query.albumAND((HashMap<String, Collection<Album>>)c1, (HashMap<String, Collection<Album>>)c2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("album_conditions",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // album_conditions ::= LBR album_conditions RBR 
            {
              Object RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object bc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = (HashMap<String, Collection<Album>>)bc; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("album_conditions",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // toptracks_conditions ::= toptracks_c 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (HashMap<String, Collection<Track>>)c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("toptracks_conditions",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // toptracks_conditions ::= toptracks_conditions OR toptracks_conditions 
            {
              Object RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.query.toptrackOR((HashMap<String, Collection<Track>>)c1, (HashMap<String, Collection<Track>>)c2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("toptracks_conditions",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // toptracks_conditions ::= toptracks_conditions AND toptracks_conditions 
            {
              Object RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.query.toptrackAND((HashMap<String, Collection<Track>>)c1, (HashMap<String, Collection<Track>>)c2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("toptracks_conditions",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // toptracks_conditions ::= LBR toptracks_conditions RBR 
            {
              Object RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object bc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = (HashMap<String, Collection<Track>>)bc; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("toptracks_conditions",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // events_c ::= TITLE RELOP ID 
            {
              Object RESULT =null;
		int relleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int relright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object rel = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object idval = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			
		try {
	 		RESULT = (HashMap<String, Collection<Event>>)parser.query.eventsByTitle((String)rel, (Object)idval);
	 	} catch(Exception e){
	 		parser.reportError(e.getMessage());
	 	}
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("events_c",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // events_c ::= TITLE RELOP STRING 
            {
              Object RESULT =null;
		int relleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int relright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object rel = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int strvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object strval = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			
		try {
	 		RESULT = (HashMap<String, Collection<Event>>)parser.query.eventsByTitle((String)rel, (String)strval);
	 	} catch(Exception e){
	 		parser.reportError(e.getMessage());
	 	}
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("events_c",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // events_c ::= ATTENDANCE RELOP ID 
            {
              Object RESULT =null;
		int relleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int relright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object rel = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object idval = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			
		try{
	 		RESULT = (HashMap<String, Collection<Event>>)parser.query.eventsByAttendance((String)rel, (String)idval);
	 	} catch(Exception e){
	 		parser.reportError(e.getMessage());
	 	}
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("events_c",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // events_c ::= ATTENDANCE RELOP integer 
            {
              Object RESULT =null;
		int relleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int relright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object rel = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int intvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int intvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object intval = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			
	 	RESULT = (HashMap<String, Collection<Event>>)parser.query.eventsByAttendance((String)rel, (Integer)intval);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("events_c",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // events_c ::= COUNTRY RELOP ID 
            {
              Object RESULT =null;
		int relleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int relright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object rel = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object idval = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			
		try {
	 		RESULT = (HashMap<String, Collection<Event>>)parser.query.eventsByCountry((String)rel, (Object)idval);
	 	} catch(Exception e){
	 		parser.reportError(e.getMessage());
	 	}
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("events_c",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // events_c ::= COUNTRY RELOP STRING 
            {
              Object RESULT =null;
		int relleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int relright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object rel = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int strvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object strval = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		try{
			RESULT = (HashMap<String, Collection<Event>>)parser.query.eventsByCountry((String)rel, (String)strval);
		} catch(Exception e){
	 		parser.reportError(e.getMessage());
	 	}
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("events_c",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // events_conditions ::= events_c 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (HashMap<String, Collection<Event>>)c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("events_conditions",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // events_conditions ::= events_conditions OR events_conditions 
            {
              Object RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.query.eventOR((HashMap<String, Collection<Event>>)c1, (HashMap<String, Collection<Event>>)c2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("events_conditions",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // events_conditions ::= events_conditions AND events_conditions 
            {
              Object RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.query.eventAND((HashMap<String, Collection<Event>>)c1, (HashMap<String, Collection<Event>>)c2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("events_conditions",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // events_conditions ::= LBR events_conditions RBR 
            {
              Object RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object bc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = (HashMap<String, Collection<Event>>)bc; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("events_conditions",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // userevents_c ::= ARTIST RELOP ID 
            {
              Object RESULT =null;
		int relleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int relright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object rel = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object idval = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			try{
	 		RESULT = (HashMap<String, Collection<Event>>)parser.query.usereventsByArtist((String)rel, (Object)idval);
	 	} catch(Exception e){
	 		parser.reportError(e.getMessage());
	 	}
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("userevents_c",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // userevents_c ::= ARTIST RELOP STRING 
            {
              Object RESULT =null;
		int relleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int relright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object rel = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int strvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object strval = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			
		try{
	 		RESULT = (HashMap<String, Collection<Event>>)parser.query.usereventsByArtist((String)rel, (String)strval);
	 	} catch(Exception e){
	 		parser.reportError(e.getMessage());
	 	}
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("userevents_c",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // userevents_c ::= TITLE RELOP ID 
            {
              Object RESULT =null;
		int relleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int relright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object rel = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object idval = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			
		try{
	 		RESULT = (HashMap<String, Collection<Event>>)parser.query.usereventsByTitle((String)rel, (Object)idval);
	 	} catch(Exception e){
	 		parser.reportError(e.getMessage());
	 	}
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("userevents_c",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // userevents_c ::= TITLE RELOP STRING 
            {
              Object RESULT =null;
		int relleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int relright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object rel = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int strvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object strval = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			
		try{
	 		RESULT = (HashMap<String, Collection<Event>>)parser.query.usereventsByTitle((String)rel, (String)strval);
	 	} catch(Exception e){
	 		parser.reportError(e.getMessage());
	 	}
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("userevents_c",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // userevents_c ::= ATTENDANCE RELOP ID 
            {
              Object RESULT =null;
		int relleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int relright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object rel = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object idval = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			
		try{
	 		RESULT = (HashMap<String, Collection<Event>>)parser.query.usereventsByAttendance((String)rel, (String)idval);
	 	} catch(Exception e){
	 		parser.reportError(e.getMessage());
	 	}
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("userevents_c",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // userevents_c ::= ATTENDANCE RELOP integer 
            {
              Object RESULT =null;
		int relleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int relright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object rel = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int intvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int intvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object intval = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			
	 	RESULT = (HashMap<String, Collection<Event>>)parser.query.usereventsByAttendance((String)rel, (Integer)intval);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("userevents_c",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // userevents_c ::= COUNTRY RELOP ID 
            {
              Object RESULT =null;
		int relleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int relright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object rel = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object idval = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		try{	
	 		RESULT = (HashMap<String, Collection<Event>>)parser.query.usereventsByCountry((String)rel, (Object)idval);
	 	} catch(Exception e){
	 		parser.reportError(e.getMessage());
	 	}
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("userevents_c",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // userevents_c ::= COUNTRY RELOP STRING 
            {
              Object RESULT =null;
		int relleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int relright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object rel = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int strvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object strval = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		try{
			RESULT = (HashMap<String, Collection<Event>>)parser.query.usereventsByCountry((String)rel, (String)strval);
		} catch(Exception e){
	 		parser.reportError(e.getMessage());
	 	}
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("userevents_c",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // userevents_conditions ::= userevents_c 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (HashMap<String, Collection<Event>>)c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("userevents_conditions",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // userevents_conditions ::= userevents_conditions OR userevents_conditions 
            {
              Object RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.query.eventOR((HashMap<String, Collection<Event>>)c1, (HashMap<String, Collection<Event>>)c2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("userevents_conditions",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // userevents_conditions ::= userevents_conditions AND userevents_conditions 
            {
              Object RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.query.eventAND((HashMap<String, Collection<Event>>)c1, (HashMap<String, Collection<Event>>)c2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("userevents_conditions",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // userevents_conditions ::= LBR userevents_conditions RBR 
            {
              Object RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object bc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = (HashMap<String, Collection<Event>>)bc; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("userevents_conditions",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // if_userevents_conditions ::= WHERE userevents_conditions 
            {
              Object RESULT =null;
		int resleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int resright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object res = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (HashMap<String, Collection<Event>>)res; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_userevents_conditions",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // if_userevents_conditions ::= 
            {
              Object RESULT =null;
		 RESULT = (HashMap<String, Collection<Event>>)parser.query.simpleUsereventsQuery(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_userevents_conditions",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // if_events_conditions ::= WHERE events_conditions 
            {
              Object RESULT =null;
		int resleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int resright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object res = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (HashMap<String, Collection<Event>>)res; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_events_conditions",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // if_events_conditions ::= 
            {
              Object RESULT =null;
		 RESULT = (HashMap<String, Collection<Event>>)parser.query.simpleEventsQuery(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_events_conditions",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // if_album_conditions ::= WHERE album_conditions 
            {
              Object RESULT =null;
		int resleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int resright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object res = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (HashMap<String, Collection<Album>>)res; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_album_conditions",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // if_album_conditions ::= 
            {
              Object RESULT =null;
		 RESULT = (HashMap<String, Collection<Album>>)parser.query.simpleAlbumsQuery(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_album_conditions",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // if_toptracks_conditions ::= WHERE toptracks_conditions 
            {
              Object RESULT =null;
		int resleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int resright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object res = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (HashMap<String, Collection<Track>>)res; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_toptracks_conditions",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // if_toptracks_conditions ::= 
            {
              Object RESULT =null;
		 RESULT = (HashMap<String, Collection<Track>>)parser.query.simpleTopTracksQuery(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_toptracks_conditions",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // string_list ::= ID 
            {
              Object RESULT =null;
		int idvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object idval = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		 	try {
		 			RESULT = parser.symbols.stringListById((String)idval);
		 	} catch(SymbolTableException e){
		 		parser.reportError(e.getMessage());
		 	}
	 	 
	 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("string_list",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // string_list ::= STRING 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 List temp = new LinkedList(); temp.add(val); RESULT = temp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("string_list",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // string_list ::= string_list CM ID 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object idval = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			try {
	 			RESULT = parser.symbols.addId2StringList((List)list, (String)idval);
	 	} catch(SymbolTableException e){
	 		parser.reportError(e.getMessage());
	 	} catch (NullPointerException e){
		}
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("string_list",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // string_list ::= string_list CM STRING 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			
		try {
			((List)list).add(val); RESULT = list; 
		}catch (NullPointerException e){
		}
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("string_list",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // string_list_done ::= string_list 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.query.setInputList((List<String>)list); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("string_list_done",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // toptracks ::= TOPTRACKS error output_type nl 
            {
              Object RESULT =null;
		int forceoutleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int forceoutright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object forceout = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
		parser.reportError("Error: bad toptracks command");
	 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("toptracks",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // toptracks ::= TOPTRACKS string_list_done if_toptracks_conditions output_type nl 
            {
              Object RESULT =null;
		int responseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int responseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object response = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int forceoutleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int forceoutright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object forceout = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			parser.outputMan.printTracksInfo((HashMap<String, Collection<Track>>)response, (String)forceout);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("toptracks",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // topalbums ::= TOPALBUMS error output_type nl 
            {
              Object RESULT =null;
		int forceoutleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int forceoutright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object forceout = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
		parser.reportError("Error: bad topalbums command");
	 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("topalbums",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // topalbums ::= TOPALBUMS string_list_done if_album_conditions output_type nl 
            {
              Object RESULT =null;
		int responseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int responseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object response = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int forceoutleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int forceoutright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object forceout = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			parser.outputMan.printAlbumsInfo((HashMap<String, Collection<Album>>)response, (String)forceout);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("topalbums",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // userevents ::= USEREVENTS error output_type nl 
            {
              Object RESULT =null;
		int forceoutleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int forceoutright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object forceout = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
		parser.reportError("Error: bad userevents command");
	 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("userevents",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // userevents ::= USEREVENTS string_list_done if_userevents_conditions output_type nl 
            {
              Object RESULT =null;
		int responseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int responseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object response = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int forceoutleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int forceoutright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object forceout = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			parser.outputMan.printUsereventsInfo((HashMap<String, Collection<Event>>)response, (String)forceout);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("userevents",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // events ::= EVENTS error output_type nl 
            {
              Object RESULT =null;
		int forceoutleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int forceoutright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object forceout = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
		parser.reportError("Error: bad events command");
	 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("events",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // events ::= EVENTS string_list_done if_events_conditions output_type nl 
            {
              Object RESULT =null;
		int responseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int responseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object response = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int forceoutleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int forceoutright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object forceout = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			parser.outputMan.printEventsInfo((HashMap<String, Collection<Event>>)response, (String)forceout);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("events",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // info ::= INFO error output_type nl 
            {
              Object RESULT =null;
		int forceoutleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int forceoutright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object forceout = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
		parser.reportError("Error: bad info command");
	 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("info",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // info ::= INFO string_list_done if_info_conditions output_type nl 
            {
              Object RESULT =null;
		int responseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int responseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object response = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int forceoutleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int forceoutright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object forceout = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			try{
				parser.outputMan.printArtistsInfo((Collection<Artist>)response, (String)forceout);
			}catch (Exception e){
				parser.reportError("Error while writing to file");
			}
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("info",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // output ::= OUTPUT error nl 
            {
              Object RESULT =null;
		 parser.reportError("Error: bad output syntax"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("output",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // output ::= OUTPUT ID nl 
            {
              Object RESULT =null;
		int idnameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idnameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object idname = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
		try {
			parser.outputMan.switchToFile((Object)idname);
		}catch(Exception e){
			parser.reportError(e.getMessage());
		} 
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("output",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // output ::= OUTPUT STDOUT nl 
            {
              Object RESULT =null;
		 parser.outputMan.switchToStdout(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("output",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // output ::= OUTPUT STRING nl 
            {
              Object RESULT =null;
		int filenameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int filenameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object filename = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.outputMan.switchToFile(filename.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("output",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // id ::= ID nl 
            {
              Object RESULT =null;
		int idvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object idval = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		try{
			parser.symbols.printSymbolContent((String)idval);
		}catch(Exception e){
			parser.reportError(e.getMessage(), idval);
		}
		
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // show ::= SHOW nl 
            {
              Object RESULT =null;
		
		try{
			parser.symbols.printSymbolTable();
		}catch(SymbolTableException e){
			parser.reportError("Error while accessing to symbol table");
		}
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("show",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // command ::= error nl 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.reportError("Error: command not recognized "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // command ::= nl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // command ::= show 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // command ::= id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // command ::= toptracks 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // command ::= userevents 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // command ::= events 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // command ::= topalbums 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // command ::= info 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // command ::= add 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // command ::= assignment 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // command ::= output 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // command_list ::= command 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // command_list ::= command_list command 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // accepted ::= command_list 
            {
              Object RESULT =null;
		 /*System.err.println("<accepted>");*/  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("accepted",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // nl ::= NL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nl",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // nl ::= COMMENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nl",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= accepted EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

